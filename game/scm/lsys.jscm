;; -*- mode: scheme; -*-

(define (lsys-search-replace str rules)
  (foldl
   (lambda (rule r)
     (let ((s (r.split (car rule))))
       (s.join (cadr rule))))
   str  
   rules))

;; runs the search-replace multiple (n) times on a string
(define (ls-generate n str rules)
  (cond 
   ((zero? n) str)
   (else
    (ls-generate 
     (- n 1) (lsys-search-replace str rules) rules))))

;; builds objects from a string
(define (ls-build string anglex angley anglez branch-scale jitter obj textures col)
  (define pos 0)
  (foldl 
   (lambda (char structure)
     (cond 
      ((or (eq? "b" char) 
	   (eq? "c" char) 	
	   (eq? "d" char) 
	   (eq? "e" char))
       (let ((obj (with-state
		   (texture
		    (load-texture
		     (cond
		      ((eq? "b" char) (list-ref textures 1))
		      ((eq? "c" char) (list-ref textures 0))
		      ((eq? "d" char) (list-ref textures 1))
		      ((eq? "e" char) (list-ref textures 0))
		      (else (list-ref textures 6)))))	    
		   (hint-nozwrite)
		   ;;(hint-cullface)
		   (colour col)
		   (scale (vector 0.3 0.3 0.3))
		   (rotate (vector 0 0 -90))
		   (when (not (eq? "a" char)) 
			 (scale (vector 3 3 3))
			 (rotate (vector 0 90 0))
			 (translate (vector 0 -0.4 0)))
		   ;;(translate (vector 0 0 pos))
		   (set! pos (+ pos 0.0015))
		   (build-instance obj))))
	 structure))
      ((eq? "a" char) (translate (vector 0.6 0 0)) structure)
      ((eq? "f" char) (translate (vector 0.6 0 0)) structure)
      ((eq? "/" char) (rotate (vector anglex 0 0)) structure)
      ((eq? "\\" char) (rotate (vector (- (+ anglex (* (crndf) jitter))) 0 0)) structure)
      ((eq? "^" char) (rotate (vector 0 (+ angley (* (crndf) jitter)) 0)) structure)
      ((eq? "&" char) (rotate (vector 0 (- (+ angley (* (crndf) jitter))) 0)) structure)
      ((eq? "+" char) (rotate (vector 0 0 (+ anglez (* (crndf) jitter)))) structure)
      ((eq? "-" char) (rotate (vector 0 0 (- (+ anglez (* (crndf) jitter))))) structure)
      ((eq? "|" char) (rotate (vector 0 0 180)) structure)
      ((eq? "[" char) 
       (let ((l (with-state 
		 (scale (vmul 
			 (vector branch-scale branch-scale branch-scale)
			 (+ 1 (* (crndf) 0.25))))
		 (build-locator))))
	 (push) 
	 (identity)
	 (parent l)
	 (cons l structure)))
      ((eq? "]" char) (pop) structure)
      (else structure)))
   '()
   (string->list string)))
