;; -*- mode: scheme; -*-

(load "flx/scm/base.jscm")
(load "scm/local-storage.jscm")

(define (get-data-as-csv)
  (define (_ n max r)
    (cond 
     ((> n max) r)
     (else
      (if (local-exists? (string-append "clearwing-" (string-append "hits-" n)))
	  (_ (+ n 1) max 
	     (string-append r (local->csv "clearwing" (string-append "hits-" n))))
	  (_ (+ n 1) max r)))))
  (dbg (_ 0 (+ (local-get-param "clearwing" "Session ID") 1) 
	  "data-version, clock-time, game-time, born-time, session, butterfly-id, state, type, healthiness, screen-size-pixels, camera-distance, mouse-x, mouse-y, world-x, world-y, world-z, dir-x, dir-y, dir-z, screen-time, random-seed, background, plant-seed\\n")))

(define (set-game-param key value)
  (local-set-param "clearwing" key value))

(define admin-version 6)

(define (version-check)
  (let ((version (string->number (local-load "clearwing-version"))))
    (when (or (not version)
	      (< version admin-version))
	  (msg (string-append "Resetting local data to version " admin-version))
	  (local-nuke)
	  (local-save "clearwing-version" admin-version)
	  )))


(define (butterfly-form name selected bclass)
  (let ((id (string-append (car name) "-" (cadr name))))
    (string-append
     "<div style='display:inline-block; width:100px'>
     <button id='" id "' onclick='butterfly_toggle(this);'>
       <img src='textures/" (car name) "-w-" (cadr name) ".png' width=100 height=100>
     </button>
     <center>
       Visible:
       <button  id='" id "' onclick='butterfly_toggle(this);'>
         <div id='" id "-text'>" 
           (if (list-contains? selected id) "ON" "OFF") 
         "</div>
       </button>
       Healthiness:
       <input onChange='set_toxicity(this.name,this.value);' type='text' name='" id "' value='" (get-toxicity id) "'></br>
       Class:
       <button  id='" id "' onclick='butterfly_class(this);'>
         <div id='" id "-class'>" 
	   (if (list-contains? bclass id) "B" "A") 
         "</div>
       </button>
     </center>
   </div>")))

(define (butterfly-toggle a)
  (let ((name a.id))
    (let ((c (document.getElementById (string-append name "-text")))
	  (selected (local-load "clearwing-selected")))
      (cond 
       ((list-contains? selected name)	 
	(local-save "clearwing-selected" (list-remove selected name))
	(set! c.innerHTML "OFF"))
       (else
	(local-save "clearwing-selected" (cons name selected))
	(set! c.innerHTML "ON"))))))

(define (butterfly-class a)
  (let ((name a.id))
    (let ((c (document.getElementById (string-append name "-class")))
	  (bclass (local-load "clearwing-class")))
      (cond 
       ((list-contains? bclass name)	 
	(local-save "clearwing-class" (list-remove bclass name))
	(set! c.innerHTML "A"))
       (else
	(local-save "clearwing-class" (cons name bclass))
	(set! c.innerHTML "B"))))))

(define (set-toxicity name value)
  (local-save
   "clearwing-toxicity"
   (map
    (lambda (t)
      (if (eq? name (car t)) 
	  (list (car t) value) 
	  t))
    (local-load "clearwing-toxicity"))))
 
(define (get-toxicity name)
  (let ((toxicity (local-load-or-create "clearwing-toxicity" '())))
    (cond 
     ((null? toxicity) 
      (local-save 
       "clearwing-toxicity" 
       (map (lambda (t) 
	      (list (string-append (car t) "-" (cadr t)) 1)) 
	    butterfly-types))
      1)
     (else
      (let ((value (cadr (assoc name toxicity))))
	(if value value 1))))))

(define (setup-morph-interface)
  (let ((c ($ ".morph-list") )
	(selected (local-load-or-create "clearwing-selected" '()))
	(bclass (local-load-or-create "clearwing-class" '())))
    (for-each
     (lambda (name)
       (c.append (butterfly-form name selected bclass)))
     butterfly-types)))

(define (score-id s) (list-ref s 0))
(define (score-time-taken s) (list-ref s 1))
(define (score-butterflies-caught s) (list-ref s 2))

(define (score-position session-id)
  (let ((scores (local-load "clearwing-score")))
    (list
     (cadr 
      (foldl
       (lambda (score r)
	 (cond 
	  ((car r) r)
	  ((eq? (score-id score) session-id) (list #t (+ (cadr r) 1))) 
	  (else (list #f (+ (cadr r) 1)))))
       (list #f 0)
       (scores.sort 
	(lambda (a b) (- (score-time-taken b) 
			 (score-time-taken a))))))
     (length scores))))

(define (factory-reset)
  (when (confirm "Are you sure?")
	(local-nuke)
	(location.reload)))

(define (clear-data)
  (define (_ n)
    (when (not (zero? n))
	  (local-delete (string-append "clearwing-hits-" n))
	  (_ (- n 1))))
  (when (confirm "Are you sure?")
	(_ (local-get-param "clearwing" "Session ID"))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		 
(version-check)

(define butterfly-types    
  (list
   (list "ceratinia" "5")
   (list "ceratinia" "6")
   (list "ceratinia" "7")
   (list "ceratinia" "8")
   (list "ceratinia" "9")
   (list "ceratinia" "10")
   (list "ceratinia" "11")
   (list "ceratinia" "12")

   (list "hypolaria" "014")
   (list "hypolaria" "015")
   (list "hypolaria" "016")
   (list "hypolaria" "017")
   
   (list "hypothyris" "014")
   (list "hypothyris" "015")
   (list "hypothyris" "016")
   (list "hypothyris" "017")
   
   (list "ithomia" "012")
   (list "ithomia" "013")

   ))

(setup-morph-interface)

(local-setup-params 
 "clearwing" 
 (list
  (list "Session ID" 0)
  (list "Health Decrease" 7)
  (list "Health Increase" 10)
  (list "Max Population" 10)
  (list "Starting Population" 5)
  (list "New Butterfly Chance" 0.01)
  (list "Butterfly Speed" 0.125)
  (list "Flap Speed" 8)
  (list "Max Appearance Depth" -200)
  (list "Min Appearance Depth" -20)
  (list "Path Variation Degrees" 10)
  (list "Circle Speed" 3)
  (list "Circle Timeout Seconds" 10)
  (list "Hit Leeway Pixels" 10)
  (list "Butterfly wing size CM" 2.5)
  ))

