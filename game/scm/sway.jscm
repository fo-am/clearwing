;; -*- mode: scheme; -*-

(load "flx/scm/fluxus.jscm")
(load "flx/scm/canvas.jscm")
(load "flx/scm/canvas-widgets.jscm")

(define flat #f)

;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-butterfly root left-wing right-wing jitter)
  (list root left-wing right-wing jitter))

(define (butterfly-root b) (list-ref b 0))
(define (butterfly-left-wing b) (list-ref b 1))
(define (butterfly-right-wing b) (list-ref b 2))
(define (butterfly-jitter b) (list-ref b 3))

(define (build-butterfly pos)
  (let ((root (with-state (translate pos) (rotate (vector 45 0 0)) (build-locator))))
    (let ((ret
	   (with-state
	    (shader-assign-compiled "default")   
	    (parent root)
	    (texture (load-texture "hypolaria-w-014.png"))
	    (scale (vector 10 10 10))
	    (hint-nozwrite)
	    (make-butterfly
	     root
	     (load-primitive "models/plane.obj")
	     (load-primitive "models/plane.obj")
	     (rndf)))))
      
      ;; build the body
      (with-state
       (shader-assign-compiled "default")   
       (parent root)
       (texture (load-texture "hypolaria-b-014.png"))
       (scale (vector 3 10 10))
       (hint-nozwrite)
       (with-state
	(translate (vector 0.24 0 0))
	(load-primitive "models/plane.obj"))
     
       (with-state
	(scale (vector -1 1 1))
	(translate (vector 0.24 0 0))
	(load-primitive "models/plane.obj")))
     
      (with-primitive 
       (butterfly-left-wing ret)
       (scale (vector -1 1 1))
       (translate (vector 0.24 0 0))
       (apply-transform!)
       )
      (with-primitive 
       (butterfly-right-wing ret)
       (translate (vector 0.24 0 0))
       (apply-transform!)
       )
      ret)))

(define (animate-butterfly! b t)
  (with-primitive 
   (butterfly-left-wing b)
   (identity)
   (rotate (vector 0 (* 45 (sin (* (+ 0.1 (butterfly-jitter b)) t 10))) 0)))
  (with-primitive 
   (butterfly-right-wing b)
   (identity)
   (rotate (vector 0 (* -45 (sin (* (+ 0.1 (butterfly-jitter b)) t 10))) 0))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (build-butterflies n)
  (build-list n (lambda (i) 
		   (build-butterfly (vmul (vector (- (modulo i 3) 1) (- (quotient i 3) 1) 0) 10)))))

(define (animate-butterflies! b t)
  (for-each 
   (lambda (b)
     (animate-butterfly! b t))
   b))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (build-plane)
  (with-state
   (shader-assign-compiled "unlit")   
   (scale (vector 30 30 30))
   (build-instance flat)))
  
(define layer-textures (list "tree.png" "shrub.png" "grass.png"))
(define colours (list (vector 0.1 0.1 0.1) (vector 0.2 0.2 0.2) (vector 0.3 0.3 0.3)))

(define roots #f)
(define levels #f)

(define (sway-levels)
  (for-each
   (lambda (level)
     (for-each
      (lambda (p)
	(with-primitive 
	 p
	 (rotate (vector 0 0 (* 0.02 (sin (+ p (time))))))))
      level))
   (cdr (reverse levels))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; preload things

(shader-compile "default" (list "p" "n" "t" "c")
		"shaders/default.vert"
		"shaders/default.frag")

(shader-compile "unlit" (list "p" "n" "t" "c")
		"shaders/unlit.vert"
		"shaders/unlit.frag")

(load-texture "hypolaria-w-014.png")
(load-texture "hypolaria-b-014.png")
(load-texture "shrub.png")
(load-texture "test.png")
(load-texture "white.png")
(load-texture "grass.png")
(load-texture "test-grey.png")
(load-texture "tree.png")
(load-texture "butterfly-01.png")

(load-mesh-cache "models/plane.obj")
(load-mesh-cache "models/flag.obj")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (render-game)
  (resize-glcanvas webgl-canvas)
  (resize-canvas canvas)

  (animate-butterflies! butterflies (time))
  
  ;;(sway-levels)
  )

(define init #f)
(define butterflies '())

(define (run-init)
;;  (set! flat (with-state (load-primitive "models/plane.obj")))
  ;;(set! plane (with-state (load-primitive "models/plane.obj")))

  (clear-colour (vector 0 0 0))

;;  (set-camera-transform 
;;   (mat4.rotateX  
;;    (mat4.translate (camera-transform) (vector 0 0 -7))
;;    (* 0.5 Math.PI)))
  
  (set! roots (build-list 3 (lambda (_) (build-locator))))

  ;; (set! levels 
  ;; 	(with-state
  ;; 	 (translate (vector -42 -10 -3))
  ;; 	 (build-list
  ;; 	  3
  ;; 	  (lambda (l)
  ;; 	    (translate (vector 0 4 0))
  ;; 	    (build-list
  ;; 	     5
  ;; 	     (lambda (i)
  ;; 	       (with-state
  ;; 		(translate (vector (* i (+ 20 (* (crndf) 5))) 0 0))
  ;; 		(texture (load-texture (list-ref layer-textures l)))
  ;; 		(colour (list-ref colours l))
  ;; 		(parent (list-ref roots l))
  ;; 		(build-plane))))))))

  (set! butterflies (build-butterflies 9))
  
  (clear-colour (list 0.0 0.0 0.0 0.0)))

(define (start)
  (when  (and
	  (not init)
	  (meshes-loaded?)
	  (textures-loaded?)
	  (shaders-loaded?)
	  ;;(canvas-loaded?)
	  )
	 (set! init #t)
	 (run-init)	 
	 (every-frame render-game)))

(msg "Loading...")
(every-frame (start))

