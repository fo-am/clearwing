;; -*- mode: scheme; -*-

(load "flx/scm/fluxus.jscm")
(load "flx/scm/canvas.jscm")
(load "flx/scm/canvas-widgets.jscm")

(define flat #f)

(define (build-plane)
  (with-state
   (shader-assign-compiled "unlit")   
   (scale (vector 30 30 30))
   (build-instance flat)))
  
(define layer-textures (list "tree.png" "shrub.png" "grass.png"))
(define colours (list (vector 0.1 0.1 0.1) (vector 0.2 0.2 0.2) (vector 0.3 0.3 0.3)))

(define roots #f)

;; 10 -10

(define levels #f)
(define butterflies #f)

(define (parallax-levels)
  (for-each
   (lambda (root)
     (with-primitive 
      root
      (translate (vector (* 0.1 (cos (time))) 0 0))))
   roots))

(define (sway-levels)
  (for-each
   (lambda (level)
     (for-each
      (lambda (p)
	(with-primitive 
	 p
	 (rotate (vector 0 0 (* 0.02 (sin (+ p (time))))))))
      level))
   (cdr (reverse levels))))

(define (zoom-levels)
  (set-camera-transform 
   (mat4.rotateX  
    (mat4.translate (midentity) 
		    (vector 0 0 (+ (* (fmod (time) 6) 2) -27)))
    (* 0.5 Math.PI))))

(define (update-butterflies butterflies)
  (map
   (lambda (b)
     (with-primitive 
      (caddr b)
      (identity)
      (rotate (vector 90 0 180))
      (translate (vector (vx (cadr b)) 
			 (vy (cadr b)) 
			 (car b)))
      (list (if (< (car b) -15) 10 (- (car b) 0.1)) 
	    (if (< (car b) -15) (vmul (crndvec) 20) (cadr b)) 
	    (caddr b))))
   butterflies))

(msg levels)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; preload things

(shader-compile "default" (list "p" "n" "t" "c")
		"shaders/default.vert"
		"shaders/default.frag")

(shader-compile "unlit" (list "p" "n" "t" "c")
		"shaders/unlit.vert"
		"shaders/unlit.frag")

(load-texture "butterfly.png")
(load-texture "shrub.png")
(load-texture "test.png")
(load-texture "white.png")
(load-texture "grass.png")
(load-texture "test-grey.png")
(load-texture "tree.png")

(load-mesh-cache "models/plane.obj")
(load-mesh-cache "models/flag.obj")

(build-cube)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (render-game)
  (resize-glcanvas webgl-canvas)
  (resize-canvas canvas)
  
  (set! butterflies (update-butterflies butterflies))
  ;;(parallax-levels)
  (sway-levels)
  ;;(zoom-levels)
  )

(define init #f)

(define (run-init)
  (set! flat (with-state (load-primitive "models/plane.obj")))

  (clear-colour (vector 0 0 0))

;;  (set-camera-transform 
;;   (mat4.rotateX  
;;    (mat4.translate (camera-transform) (vector 0 0 -7))
;;    (* 0.5 Math.PI)))
  
  (set! roots (build-list 3 (lambda (_) (build-locator))))

  (set! levels 
	(with-state
	 (translate (vector -42 -10 -3))
	 (build-list
	  3
	  (lambda (l)
	    (translate (vector 0 4 0))
	    (build-list
	     5
	     (lambda (i)
	       (with-state
		(translate (vector (* i (+ 20 (* (crndf) 5))) 0 0))
		(texture (load-texture (list-ref layer-textures l)))
		(colour (list-ref colours l))
		(parent (list-ref roots l))
		(build-plane))))))))

  (set! butterflies
	(with-state
	 (texture (load-texture "butterfly.png"))
	 (parent (car roots))
	 (build-list
	  5
	  (lambda (_)
	    (list
	     (random 10)
	     (vmul (crndvec) 50)
	     (with-state
	      ;;(colour (rndvec))
	      (build-plane)))))))

  
  (clear-colour (list 0.0 0.0 0.0 0.0)))

(define (start)
  (when  (and
	  (not init)
	  (meshes-loaded?)
	  (textures-loaded?)
	  (shaders-loaded?)
	  ;;(canvas-loaded?)
	  )
	 (set! init #t)
	 (run-init)	 
	 (every-frame render-game)))

(msg "Loading...")
(every-frame (start))

