;; -*- mode: scheme; -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "flx/scm/fluxus.jscm")
(load "flx/scm/canvas.jscm")
(load "flx/scm/canvas-widgets.jscm")
(load "scm/lsys.jscm")
(load "scm/admin.jscm")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(set-font! "Poiret One")

(define game-mode "loading")
(define current-butterfly-id 0)
(define flap-speed (local-get-param "clearwing" "Flap Speed"))
(define butterfly-speed (local-get-param "clearwing" "Butterfly Speed"))

(define (butterfly-generate-id)
  (let ((r current-butterfly-id))
    (set! current-butterfly-id (+ current-butterfly-id 1))
    r))

(define (advance-session-id)
  (local-set-param 
   "clearwing" "Session ID" 
   (+ (local-get-param "clearwing" "Session ID") 1)))

;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-butterfly id type state pos dir root left-wing right-wing jitter t)
  (list id type state pos dir root left-wing right-wing jitter t))

(define (butterfly-id b) (list-ref b 0))
(define (butterfly-modify-id b v) (list-replace b 0 v))
(define (butterfly-type b) (list-ref b 1))
(define (butterfly-modify-type b v) (list-replace b 1 v))
(define (butterfly-state b) (list-ref b 2))
(define (butterfly-modify-state b v) (list-replace b 2 v))
(define (butterfly-pos b) (list-ref b 3))
(define (butterfly-modify-pos b v) (list-replace b 3 v))
(define (butterfly-dir b) (list-ref b 4))
(define (butterfly-modify-dir b v) (list-replace b 4 v))
(define (butterfly-root b) (list-ref b 5))
(define (butterfly-left-wing b) (list-ref b 6))
(define (butterfly-right-wing b) (list-ref b 7))
(define (butterfly-jitter b) (list-ref b 8))
(define (butterfly-t b) (list-ref b 9))
(define (butterfly-modify-t b v) (list-replace b 9 v))

(define radians-per-degree 0.0174533)
(define butterfly-dir-var (* radians-per-degree 20))

(define (destroy-butterfly b)
  (destroy (butterfly-root b)))

(define (choose-type)
  (choose 
   (list
    (list "hypolaria" "014")
    (list "hypothyris" "017")
    (list "ithomia" "013")
    )))

(define (build-butterfly state pos)
  (let ((root (build-locator))
	(type (choose-type)))
    (let ((ret
	   (with-state
	    (shader-assign-compiled "default")   
	    (parent root)
	    (texture (load-texture (string-append (car type) "-w-" (cadr type) ".png")))
	    (scale (vector 10 10 10))
	    (hint-nozwrite)
	    (make-butterfly
	     (butterfly-generate-id)
	     type
	     state
	     pos
	     (mtransform 
	      (mrotate 
	       (mrotate 
		(mrotate 
		 (midentity) 
		 (vector 1 0 0) 
		 (* (crndf) butterfly-dir-var)) 
		(vector 0 1 0) 
		(* (crndf) butterfly-dir-var)) 
	       (vector 0 0 1) 
	       (* (crndf) butterfly-dir-var))
	      (if (eq? state "title")
		  (vector (/ butterfly-speed 2) 0 0)
		  (vector 0 0 butterfly-speed)))
	     root
	     (load-primitive "models/plane.obj")
	     (load-primitive "models/plane.obj")
	     (rndf) (rndf)))))

      
       ;; build the body
       (with-state
	(shader-assign-compiled "default")   
	(parent root)
	(texture (load-texture (string-append (car type) "-b-" (cadr type) ".png")))
	(rotate (vector 45 0 0))
	(scale (vector 3 10 10))
	;;(hint-nozwrite)
	(with-state
	 (translate (vector 0.24 0 0))
	 (load-primitive "models/plane.obj"))
	
	(with-state
	 (scale (vector -1 1 1))
	 (translate (vector 0.24 0 0))
	 (load-primitive "models/plane.obj")))
       
       (with-primitive 
	(butterfly-left-wing ret)
	(scale (vector -1 1 1))
	(translate (vector 0.24 0 0))
	(apply-transform!)
	)
       (with-primitive 
	(butterfly-right-wing ret)
	(translate (vector 0.24 0 0))
	(apply-transform!)
	(rotate (vector 45 0 0))
	)
      ret)))


(define (generate-start-pos state)
  (if (eq? state "title")
      (vector -50 (* (crndf) 50) 0)
      (vmul (vector (crndf) (crndf) -2) 100)))


(define (update-butterfly b)
  (butterfly-modify-pos
   (if (> (butterfly-t b) 1)
       (butterfly-modify-t 
	(butterfly-modify-pos 
	 (butterfly-modify-type b (choose-type))
	 (generate-start-pos (butterfly-state b))) 0)
       (butterfly-modify-t b (+ (butterfly-t b) 0.002)))
   (vadd 
    (butterfly-pos b)
    (butterfly-dir b)
    )))

(define (animate-butterfly! b t)
  (let ((a (* (+ 0.5 (* (butterfly-jitter b) 0.5)) t flap-speed)))
    (let ((sa (* -3.5 (- (abs (sin a)) 0.45))))
      (with-primitive 
       (butterfly-root b)
       (identity)
       (translate (butterfly-pos b))
       (translate (vector 0 sa 0))
       (maim (vnormalise (butterfly-dir b)) (vector 0 1 0))
       (rotate (vector 0 90 -90))
       )
      (with-primitive 
       (butterfly-left-wing b)
       (identity)
       (rotate (vector 45 (* 45 sa) 0)))
      (with-primitive 
       (butterfly-right-wing b)
       (identity)
       (rotate (vector 45 (* -45 sa) 0))))))

(define (butterfly-screen-pos s)
  (project-point (butterfly-pos s)))

(define (butterfly-detect-hits butterfly-list fn)
  ;; find closest index
  (let ((closest
         (index-foldl
          (lambda (i b r)
            (let ((pos (butterfly-screen-pos b)))
              (let ((dist (vdist (vector canvas-mouse-x canvas-mouse-y 0) pos)))
                (if (< dist (car r))
                    (list dist i pos b) r))))
          (list 999999 -1 0 0)
          butterfly-list)))
    ;; if less than hit dist
    (cond
     ((< (car closest) 50)
      ;; remove it
      (fn butterfly-list (list-ref closest 3) (list-ref closest 2)))
     (else butterfly-list))))


(define (butterfly-hit butterflies butterfly pos)
  (make-gobble (vx pos) (vy pos) 0 255 0 0.05)
  (map
   (lambda (b)
     (cond 
      ((eq? (butterfly-id butterfly) (butterfly-id b))       
       (local-add-item 
	"clearwing" 
	(string-append "hits-" (local-get-param "clearwing" "Session ID"))
	(list
	 (local-get-param "clearwing" "Session ID")
	 (butterfly-id b)
	 (vx pos) 
	 (vy pos)
	 ;; etc
	 ))
       (butterfly-modify-pos 
	(butterfly-modify-id b (butterfly-generate-id))
	(generate-start-pos)))
      (else b)))
   butterflies))


(define (make-gobble x y r g b s)
  (set! gobble-x x)
  (set! gobble-y y)
  (set! gobble-t 0)
  (set! gobble-r r)
  (set! gobble-g g)
  (set! gobble-b b)
  (set! gobble-s s))

(define gobble-x 0)
(define gobble-y 0)
(define gobble-t 1)
(define gobble-r 1)
(define gobble-g 1)
(define gobble-b 1)
(define gobble-s 0.2)

(define (draw-gobble ctx)
  (when (< gobble-t 1)
        (ctx.beginPath)
        (ctx.arc gobble-x gobble-y
                 (* (- 1 gobble-t) 150)
                 0 (* Math.PI 2) true)
        (ctx.closePath)
        (let ((grd (ctx.createRadialGradient
                    gobble-x gobble-y (* (- 1 gobble-t) 10)
                    gobble-x gobble-y (* (- 1 gobble-t) 150))))
          (grd.addColorStop 0 (string-append "rgba(" gobble-r ", " gobble-g ", " gobble-b ", " 0.5 ")"))
          (grd.addColorStop 1 (string-append "rgba(255, 255, 0, 0.0)"))
          (set! ctx.fillStyle grd)
          (ctx.fill))
        (set! gobble-t (+ gobble-t gobble-s))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (build-butterflies n)
  (build-list n (lambda (_) 
		  (build-butterfly 
		   (choose (list "approach" "circle"))
		   (vector 1000 0 0)))))

(define (build-title-butterflies n)
  (build-list n (lambda (_) 
		  (build-butterfly 
		   "title" 
		   (vector (+ -50 (* (rndf) 100)) 
			   (* (crndf) 50) 0)))))

(define (update-butterflies b)
  (map
   (lambda (b)
     (update-butterfly b ))
   (if canvas-mouse-clicked
       (butterfly-detect-hits b butterfly-hit)
       b)))

(define (animate-butterflies! b t)
  (for-each 
   (lambda (b)
     (animate-butterfly! b t))
   b))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (set-background img)
  (js "$('#webgl-canvas').css('background-image', 'url('+img+')');"))


(define (shuffle-background)
  (set-background (choose (list "images/bg-01.jpg"
				"images/bg-02.jpg"
				"images/bg-03.jpg"))))
  
(define (animate-trees tree)
  (for-each 
   (lambda (tree)
     (for-each
      (lambda (p)
	(with-primitive 
	 p
	 (rotate (vector 0 0 (* 0.1 (cos (* 1 (* 0.5 (+ 1 (modulo p 5)) (time)))))))))
      tree))
   trees))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; preload things

(shader-compile "default" (list "p" "n" "t" "c")
		"shaders/default.vert"
		"shaders/default.frag")

(shader-compile "unlit" (list "p" "n" "t" "c")
		"shaders/unlit.vert"
		"shaders/unlit.frag")

(load-texture "hypolaria-w-014.png")
(load-texture "hypolaria-b-014.png")
(load-texture "hypothyris-w-017.png")
(load-texture "hypothyris-b-017.png")
(load-texture "shrub.png")
(load-texture "test.png")
(load-texture "white.png")
(load-texture "grass.png")
(load-texture "test-grey.png")
(load-texture "tree.png")
(load-texture "butterfly-01.png")

(for-each 
 (lambda (t)
   (load-texture t))
 (list
  "plants/branch-0-00.png"
  "plants/branch-0-01.png"
  "plants/leaf-0-00.png"
  "plants/leaf-0-01.png"
  "plants/leaf-0-02.png"
  "plants/branch-1-00.png"
  "plants/leaf-1-00.png"
  "plants/leaf-1-01.png"
  "plants/leaf-1-02.png"))
   
(load-mesh-cache "models/plane.obj")
(load-mesh-cache "models/lsys-plane.obj")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (build-tree)
  (crop
   (shuffle
    (with-state
     (shader-assign-compiled "unlit")   
     (translate (vector 0 -25 0))
     (rotate (vector 0 0 90))
     (scale (vector 20 20 20))
     (ls-build (ls-generate 6 "A" (list 
				   (list "A" "a[^Bd][&&d][&Ac]")
				   (list "B" "b[^Ac][^e][&Be]")
				   ))
	       20 20 20 0.85 70 leaf-obj
	       (list 
		"plants/branch-0-00.png"
		"plants/branch-0-01.png"
		"plants/leaf-0-00.png"
		"plants/leaf-0-02.png"
		"plants/leaf-0-02.png"
		)
	       (vector 1 1 1))))
   30))

(define (build-tree2)
  (crop
   (shuffle
    (with-state
     (shader-assign-compiled "unlit")   
     (translate (vector 0 -25 0))
     (rotate (vector 0 0 90))
     (scale (vector 20 20 20))
     (ls-build (ls-generate 6 "A" (list 
				   (list "A" "a[^Ad][&&b][&Ac]")
				   ))
	       20 20 20 0.85 70 leaf-obj
	       (list 
		"plants/branch-1-00.png"
		"plants/leaf-1-00.png"
		"plants/leaf-1-01.png"
		"plants/leaf-1-02.png")
	       (vector 1 1 1))))
   30))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define init #f)
(define butterflies '())
(define leaf-obj 0)
(define tree-root 0)

(define trees '())

(define (run-init)
  (cond 
   ((eq? game-mode "title")
    (set-background "images/bg.jpg")
    (canvas-setup)
    (clear-colour (vector 0 0 0))    
    (set! game-root (build-locator))
    (with-state
     (parent game-root)
     (set! butterflies (build-title-butterflies 30)))
    (set! title-text 
	  (make-textbox (/ screen-width 2) 230 "30pt" 40 "left" 
			(list "Clearwing Butterfly Game")))
    (set! info-text 
	  (make-textbox (/ screen-width 2) 300 "20pt" 40 "left" 
			(list "Take part in this citizen science game by" 
			      "hunting butterflies in the jungle!")))
    (set! leaf-obj (with-state 
		    (translate (vector 1000 0 0)) 
		    (load-primitive "models/lsys-plane.obj")))

    (set! start-button (make-text-button 
			(vector (/ screen-width 2) (- screen-height 200) 0) 
			20 "Play"
			(lambda ()
			  (destroy game-root)
			  (set! game-mode "game")
			  (run-init))))
    
    (clear-colour (list 0.0 0.0 0.0 0.0)))

   ((eq? game-mode "game")
    (set! game-root (build-locator))
    (shuffle-background)
    (set! start-button (make-text-button 
			(vector (- screen-width 100) (- screen-height 50) 0)
			20 "Quit"
			(lambda ()
			  (destroy game-root)
			  (set! game-mode "title")
			  (run-init))))
    (with-state
     (parent game-root)
     (set! trees (list
		  ;;(with-state
		  ;; (translate (vector -10 -6 0))
		  ;; (build-tree))
		  ;; (with-state
		  ;; 	(translate (vector 0 -6 0))
		  ;; 	(build-tree))
		  ;; (with-state
		  ;; 	(translate (vector 10 -6 0))
		  ;; 	(build-tree))
		 (with-state
		  (scale (vector 0.5 0.5 0.5))
		  (translate (vector 25 -10 0))
		  (build-tree2))))
     (set! butterflies (build-butterflies 9))))

   (else 0)))

(define (render-game)
  (resize-glcanvas webgl-canvas)
  (resize-canvas canvas)
  (cond
   ((eq? game-mode "title")
    (text-button-update start-button 0)    
    (set! butterflies (update-butterflies butterflies))
    (animate-butterflies! butterflies (time))

    (ctx.clearRect 0 0 screen-width screen-height)	  
    (set! ctx.fillStyle "#fff")
    (set! ctx.globalAlpha 0.75)
    (ctx.fillRect 0 160 screen-width 340)
    (set! ctx.globalAlpha 1.0)
    (set! ctx.fillStyle "#000")
    (textbox-render! title-text)
    (textbox-render! info-text)
    (text-button-render! start-button)
    0)
   ((eq? game-mode "game")
    (text-button-update start-button 0)    
    (set! butterflies (update-butterflies butterflies))
    (animate-butterflies! butterflies (time))
    (animate-trees trees)
    (ctx.clearRect 0 0 screen-width screen-height)	  
    (draw-gobble ctx)
    (text-button-render! start-button))
   (else 0)))


(define (start)
  (when  (and
	  (not init)
	  (meshes-loaded?)
	  (textures-loaded?)
	  (shaders-loaded?)
	  ;(canvas-loaded?)
	  )
	 (set! init #t)
	 (set! game-mode "title")
	 (run-init)	 
	 (every-frame render-game)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(resize-glcanvas webgl-canvas)
(resize-canvas canvas)
(Math.seedrandom "one")
(ctx.fillText "Loading..." 100 100)

(advance-session-id)

(every-frame (start))

