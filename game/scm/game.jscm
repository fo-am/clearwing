;; -*- mode: scheme; -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "flx/scm/fluxus.jscm")
(load "flx/scm/canvas.jscm")
(load "flx/scm/canvas-widgets.jscm")
(load "scm/lsys.jscm")
(load "scm/admin.jscm")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(set-font! "Poiret One")

(define game-mode "loading")
(define current-butterfly-id 0)
(define flap-speed (local-get-param "clearwing" "Flap Speed"))
(define butterfly-speed (local-get-param "clearwing" "Butterfly Speed"))

(define health 100)
(define health-dec (string->number (local-get-param "clearwing" "Health Decrease")))
(define health-inc (string->number (local-get-param "clearwing" "Health Increase")))
(define hint-time 100)
(define butterflies-caught 0)
(define game-start-time 0)
(define max-population (string->number (local-get-param "clearwing" "Max Population")))
(define new-butterfly-chance (string->number (local-get-param "clearwing" "New Butterfly Chance")))
(define appearance-area-w (string->number (local-get-param "clearwing" "Appearance Area Width")))
(define appearance-area-h (string->number (local-get-param "clearwing" "Appearance Area Height")))
(define appearance-depth (string->number (local-get-param "clearwing" "Appearance Depth")))
(define butterfly-circle-speed (string->number (local-get-param "clearwing" "Circle Speed")))
(define butterfly-circle-timeout (string->number (local-get-param "clearwing" "Circle Timeout Seconds")))
(define radians-per-degree 0.0174533)
(define butterfly-dir-var (* radians-per-degree (string->number (local-get-param "clearwing" "Path Variation Degrees"))))
(define hit-leeway (string->number (local-get-param "clearwing" "Hit Leeway Pixels")))
(define butterfly-start-num (local-get-param "clearwing" "Starting Population"))
(define butterfly-wing-size (local-get-param "clearwing" "Butterfly wing size CM"))
(define butterfly-scale (* butterfly-wing-size 2)) ;; plane.obj is 0.5 units wide

(define (butterfly-generate-id)
  (let ((r current-butterfly-id))
    (set! current-butterfly-id (+ current-butterfly-id 1))
    r))

(define (advance-session-id)
  (local-set-param 
   "clearwing" "Session ID" 
   (+ (local-get-param "clearwing" "Session ID") 1)))

(define (draw-health ctx x y t max-t)
  (let ((h (/ t max-t)))
    (set! ctx.fillStyle (string-append "rgba(" (Math.floor (* (- 1 h) 255)) ", "
                                       (Math.floor (* h 255)) ", " 0 ", 1.0)"))
    (ctx.fillRect (+ x 50) (+ y 30) (* h 245) 37)
    (ctx.drawImage (find-image "health.png" image-lib) x y)))

;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-butterfly id type state pos dir root left-wing right-wing jitter t)
  (list id type state pos dir root left-wing right-wing jitter t))

(define (butterfly-id b) (list-ref b 0))
(define (butterfly-modify-id b v) (list-replace b 0 v))
(define (butterfly-type b) (list-ref b 1))
(define (butterfly-modify-type b v) (list-replace b 1 v))
(define (butterfly-state b) (list-ref b 2))
(define (butterfly-modify-state b v) (list-replace b 2 v))
(define (butterfly-pos b) (list-ref b 3))
(define (butterfly-modify-pos b v) (list-replace b 3 v))
(define (butterfly-dir b) (list-ref b 4))
(define (butterfly-modify-dir b v) (list-replace b 4 v))
(define (butterfly-root b) (list-ref b 5))
(define (butterfly-right-wing b) (list-ref b 6))
(define (butterfly-left-wing b) (list-ref b 7))
(define (butterfly-jitter b) (list-ref b 8))
(define (butterfly-t b) (list-ref b 9))
(define (butterfly-modify-t b v) (list-replace b 9 v))

(define (destroy-butterfly b)
  (destroy (butterfly-root b)))

(define (choose-type) 
  (let ((selected (local-load "clearwing-selected")))
    (if (null? selected) 
	(choose butterfly-types)
	(let ((id (choose selected)))
	  (id.split "-")))))

(define (build-butterfly state pos)
  (let ((root (build-locator))
	(type (choose-type)))
    (let ((ret
	   (with-state
	    (shader-assign-compiled "default")   
	    (parent root)
	    (texture (load-texture (string-append (car type) "-w-" (cadr type) ".png")))
	    ;; wings are approx 2.5 cm wide
	    (scale (vector butterfly-scale butterfly-scale butterfly-scale))
	    (hint-nozwrite)
	    (hint-cullface)
	    
	    (make-butterfly
	     (butterfly-generate-id)
	     type
	     state
	     pos
	     (mtransform 
	      (mrotate 
	       (mrotate 
		(mrotate 
		 (midentity) 
		 (vector 1 0 0) 
		 (* (crndf) butterfly-dir-var)) 
		(vector 0 1 0) 
		(* (crndf) butterfly-dir-var)) 
	       (vector 0 0 1) 
	       (* (crndf) butterfly-dir-var))
	      (cond 
	       ((eq? state "title")
		(vector butterfly-speed 0 0))
	       (else
		;; aim at the camera at 0,0,0
		(vmul (vnormalise (vsub (vector 0 0 0) pos)) 
		      butterfly-speed))))
	     root
	     (load-primitive "models/plane.obj")
	     (load-primitive "models/plane.obj")
	     (rndf) 0))))

     
      ;; build the body
      (with-state
       (shader-assign-compiled "default")   
       (parent root)
       (texture (load-texture (string-append (car type) "-b.png")))
       (rotate (vector 45 0 0))
       (scale (vector 1 butterfly-scale butterfly-scale))
       (hint-nozwrite)
       (hint-cullface)
       (with-state
	(translate (vector 0.24 0 0))
	(load-primitive "models/plane.obj"))
       
       (with-state
	(rotate (vector 0 180 0))
	(translate (vector 0.24 0 0))
	(load-primitive "models/plane.obj")))
      
      (with-primitive 
       (butterfly-left-wing ret)
       (scale (vector -1 1 1))
       (translate (vector 0.24 0 0))
       (apply-transform!)
       )
      (with-primitive 
       (butterfly-right-wing ret)
       (translate (vector 0.24 0 0))
       (apply-transform!)
       (rotate (vector 45 0 0))
       )
      ret)))

(define (generate-start-pos state)
  (cond 
   ((eq? state "title")
    (vector (+ -30 (* (rndf) 5)) (* (crndf) 15) -20))
   ((eq? state "circle")
    (vector (* (crndf) appearance-area-w) 
	    (* (crndf) appearance-area-h) 
	    (* (rndf) appearance-depth)))
   (else
    (vector (* (crndf) appearance-area-w) 
	    (* (crndf) appearance-area-h) 
	    appearance-depth))))

(define (update-butterfly b)
  (let ((t (butterfly-t b)))
    (butterfly-modify-pos
     (if (or (and 
	      (eq? (butterfly-state b) "circle")
	      (> (butterfly-t b) butterfly-circle-timeout))
	     (if (eq? (butterfly-state b) "title")
		 (> (vx (butterfly-pos b)) 24) 
		 ;; slightly behind the back plane
		 (> (vz (butterfly-pos b)) 2)))
	 (butterfly-modify-state b "dead")
	 (butterfly-modify-t 
	  (if (eq? (butterfly-state b) "circle")
	      ;; rotate direction
	      (butterfly-modify-dir 
	       b (vmul (vector (cos (+ (* t butterfly-circle-speed) (* 6.3 (butterfly-jitter b)))) 
			       0 
			       (sin (+ (* t butterfly-circle-speed) (* 6.3 (butterfly-jitter b))))) 
		       butterfly-speed))
	      b)
	  (+ t canvas-delta)))
     (vadd 
      (butterfly-pos b)
      (butterfly-dir b)
      ))))

(define (animate-butterfly! b t)
  (let ((a (* (+ 0.5 (* (butterfly-jitter b) 0.5)) t flap-speed)))
    (let ((sa (* -3.5 (- (abs (sin a)) 0.45))))
      (with-primitive 
       (butterfly-root b)
       (identity)
       (translate (butterfly-pos b))
       (translate (vector 0 (/ sa 4) 0))
       (maim (vnormalise (butterfly-dir b)) (vector 0 1 0))
       (rotate (vector 0 90 -90))
       )
      (with-primitive 
       (butterfly-left-wing b)
       (identity)
       (rotate (vector 45 (* 45 sa) 0)))
      (with-primitive 
       (butterfly-right-wing b)
       (identity)
       (rotate (vector 45 (* -45 sa) 0))))))

(define (butterfly-screen-pos s)
  (project-point (butterfly-pos s)))

(define (butterfly-screen-size b)
  (fabs
   (vx
    (with-primitive 
     (butterfly-root b) 
     (let ((centre (mtransform (get-transform) (vector 0 0 0))))
       (vsub 
	(project-point (vadd centre (vector butterfly-wing-size 0 0)))
	(project-point (vadd centre (vector -butterfly-wing-size 0 0)))))))))

(define (butterfly-detect-hits butterfly-list fn)
  ;; find closest index
  (let ((closest
         (index-foldl
          (lambda (i b r)
            (let ((pos (butterfly-screen-pos b)))
              (let ((dist (vdist (vector canvas-mouse-x canvas-mouse-y 0) pos)))
                (if (< dist (car r))
                    (list dist i pos b) r))))
          (list 999999 -1 0 0)
          butterfly-list)))
    ;; if less than hit dist
    (cond
     ((< (car closest) (+ (/ (butterfly-screen-size (list-ref closest 3)) 2) hit-leeway))
      ;; remove it
      (fn butterfly-list (list-ref closest 3) (list-ref closest 2)))
     (else butterfly-list))))

(define save-version 1)

(define (butterfly-hit butterflies butterfly pos)
  (set! butterflies-caught (+ butterflies-caught 1))
  (make-gobble (vx pos) (vy pos) 0 255 0 0.05)
  (set! health (+ health health-inc))
  (map
   (lambda (b)
     (cond 
      ((eq? (butterfly-id butterfly) (butterfly-id b))       
       (local-add-item 
	"clearwing" 
	(string-append "hits-" (local-get-param "clearwing" "Session ID"))
	(list
	 save-version
	 (- (js "new Date()") game-start-time)
	 (local-get-param "clearwing" "Session ID")
	 (butterfly-id b)
	 (butterfly-state b)
	 (string-append (car (butterfly-type b)) "-" (cadr (butterfly-type b)))
	 (butterfly-screen-size b)
	 (vmag (butterfly-pos b))
	 (vx pos) 
	 (vy pos)
	 (vx (butterfly-pos b))
	 (vy (butterfly-pos b))
	 (vz (butterfly-pos b))
	 (vx (butterfly-dir b))
	 (vy (butterfly-dir b))
	 (vz (butterfly-dir b))
	 (butterfly-t b)
	 (butterfly-jitter b)
	 current-background
	 current-plant-seed
	 ))
       (butterfly-modify-state b "dead"))
      (else b)))
   butterflies))


(define (make-gobble x y r g b s)
  (set! gobble-x x)
  (set! gobble-y y)
  (set! gobble-t 0)
  (set! gobble-r r)
  (set! gobble-g g)
  (set! gobble-b b)
  (set! gobble-s s))

(define gobble-x 0)
(define gobble-y 0)
(define gobble-t 1)
(define gobble-r 1)
(define gobble-g 1)
(define gobble-b 1)
(define gobble-s 0.2)

(define (draw-gobble ctx)
  (when (< gobble-t 1)
        (ctx.beginPath)
        (ctx.arc gobble-x gobble-y
                 (* (- 1 gobble-t) 150)
                 0 (* Math.PI 2) true)
        (ctx.closePath)
        (let ((grd (ctx.createRadialGradient
                    gobble-x gobble-y (* (- 1 gobble-t) 10)
                    gobble-x gobble-y (* (- 1 gobble-t) 150))))
          (grd.addColorStop 0 (string-append "rgba(" gobble-r ", " gobble-g ", " gobble-b ", " 0.5 ")"))
          (grd.addColorStop 1 (string-append "rgba(255, 255, 0, 0.0)"))
          (set! ctx.fillStyle grd)
          (ctx.fill))
        (set! gobble-t (+ gobble-t gobble-s))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (build-new-butterfly mode)
  (with-state
   (parent game-root)
   (if (eq? mode "game")
       (let ((type (choose (list "approach" "circle"))))
	 (build-butterfly type (generate-start-pos type)))
       (build-butterfly 
	"title" 
	(generate-start-pos "title")))))

(define (butterfly-birth b mode)
  (filter
   (lambda (b)
     (cond 
      ((eq? (butterfly-state b) "dead")
       (destroy-butterfly b) #f)
      (else #t)))
   (if (and (< (length b) max-population)
	    (< (rndf) new-butterfly-chance))
       (cons (build-new-butterfly mode) b)
       b)))
  
(define (update-butterflies b mode)
  (map
   (lambda (b)
     (update-butterfly b))
   (butterfly-birth 
    (if (and canvas-mouse-clicked (eq? mode "game"))
	(begin
	  (set! canvas-mouse-clicked #f)
	  (butterfly-detect-hits b butterfly-hit))
	b)
    mode)))

(define (animate-butterflies! b t)
  (for-each 
   (lambda (b)
     (animate-butterfly! b t))
   b))

(define (draw-debug butterflies)
  (for-each
   (lambda (b)
     (let ((p (butterfly-screen-pos b)))
       (with-primitive 
	(butterfly-root b) 
	(let ((centre (mtransform (get-transform) (vector 0 0 0))))
	  (let ((start (project-point (vadd centre (vector butterfly-wing-size 0 0))))
		(end (project-point (vadd centre (vector -butterfly-wing-size 0 0)))))
	    (draw-line (vx start) (vy start)
		       (vx end) (vy end))	      
	    )))

       (set! ctx.font (string-append "10pt Arial"))

       (ctx.fillText
	(string-append "" (floor (butterfly-screen-size b)))
	(vx p) (vy p))
       (canvas-init-defaults)))     
   butterflies))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (set-background img)
  (set! current-background img)
  (js "$('#webgl-canvas').css('background-image', 'url('+img+')');"))

(define (shuffle-background)
  (set-background (choose (list "images/bg-01.jpg"
				"images/bg-02.jpg"
				"images/bg-03.jpg"
				"images/bg-04.jpg"
				"images/bg-05.jpg"
				"images/bg-06.jpg"
				"images/bg-07.jpg"
				))))
  
(define (animate-trees tree)
  (for-each 
   (lambda (tree)
     (for-each
      (lambda (p)
	(with-primitive 
	 p
	 (rotate (vector (* 0.1 (cos (* 1 (* 0.5 (+ 1 (modulo p 5)) (time))
					)))
			 0 0))))
      tree))
   trees))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; preload things

(shader-compile "default" (list "p" "n" "t" "c")
		"shaders/default.vert"
		"shaders/default.frag")

(shader-compile "unlit" (list "p" "n" "t" "c")
		"shaders/unlit.vert"
		"shaders/unlit.frag")

(shader-compile "leaf" (list "p" "n" "t" "c")
		"shaders/leaf.vert"
		"shaders/leaf.frag")

(load-texture "ceratinia-b.png")
(load-texture "hypolaria-b.png")
(load-texture "hypothyris-b.png")
(load-texture "ithomia-b.png")

(for-each 
 (lambda (type)
   (load-texture (string-append (car type) "-w-" (cadr type) ".png")))
 butterfly-types)

(load-texture "shrub.png")
(load-texture "test.png")
(load-texture "white.png")
(load-texture "grass.png")
(load-texture "test-grey.png")
(load-texture "tree.png")

(for-each 
 (lambda (t)
   (load-texture t))
 (list
    "plants/1-1.png"

    "plants/2-1.png"
    "plants/2-2.png"
    "plants/2-3.png"

    "plants/3-1.png"
    "plants/3-2.png"
    "plants/3-3.png"
    "plants/3-4.png"
    "plants/3-5.png"

    "plants/4-1.png"
    "plants/4-2.png"
    "plants/4-3.png"
    "plants/4-4.png"

    "plants/5-1.png"
    "plants/5-2.png"
    "plants/5-3.png"
    "plants/5-4.png"
    "plants/5-5.png"
    "plants/5-6.png"
    "plants/5-7.png"
    "plants/5-8.png"
    "plants/5-9.png"

    "plants/eden1-1.png"
    
    "plants/eden2-1.png"
    "plants/eden2-2.png"
    "plants/eden2-3.png"
    "plants/eden2-4.png"
    "plants/eden2-5.png"

    "plants/eden3-1.png"
    "plants/eden3-2.png"
    "plants/eden3-3.png"

    "plants/eden4-1.png"
    "plants/eden4-2.png"
    "plants/eden4-3.png"

    "plants/eden5-1.png"
    "plants/eden5-2.png"
    "plants/eden5-3.png"

    "plants/eden6-1.png"
    "plants/eden6-2.png"

    "plants/eden7-1.png"
    "plants/eden7-2.png"
    "plants/eden7-3.png"

    "plants/stem 1.png"
    "plants/stem 2.png"
    "plants/stem 3.png"
    "plants/stem 4.png"
    "plants/stem 5.png"
    "plants/stem 6.png"
    "plants/stem 7.png"
    "plants/stem 8.png"
    "plants/stem 9.png"
    "plants/stem 10.png"
    "plants/stem 11.png"
    ))
   
(load-mesh-cache "models/plane.obj")
(load-mesh-cache "models/lsys-plane2.obj")

(load-images!
 (list
  "bg-01.jpg"
  "bg-02.jpg"
  "bg-03.jpg"
  "bg-04.jpg"
  "bg-05.jpg"
  "bg-06.jpg"
  "bg-07.jpg"				
  "health.png")
 (lambda ()
   0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (build-plant pos desc textures)
  (let ((depth (list-ref desc 0))
	(rot (list-ref desc 1))
	(rules (list-ref desc 2)))
    (msg desc)
    (crop
     (shuffle
      (with-state
       (hint-cullface)
       (shader-assign-compiled "leaf")   
       (translate pos)
       (rotate (vector 0 0 90))
       (scale (vector 40 40 40))
       (ls-build (ls-generate depth "A" rules)
		 (vx rot) (vy rot) (vz rot) 0.80 depth leaf-obj
		 textures (vector 1 1 1))))
     30)))

(define left-plant-pos (vector -60 -100 -180))
(define centre-plant-pos (vector 0 -150 -180))
(define right-plant-pos (vector 60 -100 -180))

(define plant-rules 
  (list
   (list ;; messy squat tree
    4 (vector 7 25 35)
    (list 
     (list "b" "fc-[aad]++fb")
     (list "A" "a[+A]//[-A]//[aAb]")))
   (list ;; climber 
    7 
    (vector 17 25 25)
    (list 
     (list "B" "aa[+b]d[-c]")
     (list "A" "aa-a+[--B][+++B]+/[A]")))
   (list ;; twisty tree
    6 
    (vector 45 5 35)
    (list 
     (list "A" "a[+^A&a//d]/aa[--ab][-Aa//c]")
     ))
   (list ;; shrub
    5 
    (vector 17 15 15)
    (list 
     (list "B" "[a+aa++b[f&A][f^A]]")
     (list "A" "B/A/A")
     ))))

(define plant-texture-sets 
  (list
   (list 
    "plants/stem 11.png"
    "plants/eden7-1.png"
    "plants/eden7-2.png"
    "plants/eden7-3.png"
    )
   (list 
    "plants/stem 6.png"
    "plants/eden6-1.png"
    "plants/eden6-2.png"
    "plants/eden6-2.png"
    )
   (list 
    "plants/stem 5.png"
    "plants/eden5-1.png"
    "plants/eden5-2.png"
    "plants/eden5-3.png"
    )
   (list 
    "plants/stem 4.png"
    "plants/eden4-1.png"
    "plants/eden4-2.png"
    "plants/eden4-3.png"
    )
   (list 
    "plants/stem 4.png"
    "plants/eden3-1.png"
    "plants/eden3-2.png"
    "plants/eden3-3.png"
    )
   (list 
    "plants/stem 4.png"
    "plants/eden1-1.png"
    "plants/eden1-1.png"
    "plants/eden1-1.png"
    )
   (list 
    "plants/stem 3.png"
    "plants/5-1.png"
    "plants/5-2.png"
    "plants/5-3.png"
    )
   (list 
    "plants/stem 1.png"
    "plants/4-1.png"
    "plants/4-2.png"
    "plants/4-3.png"
    )
   (list 
    "plants/stem 2.png"
    "plants/3-1.png"
    "plants/3-2.png"
    "plants/3-3.png"
    )
   (list 
    "plants/stem 2.png"
    "plants/eden7-1.png"
    "plants/eden7-2.png"
    "plants/eden7-3.png"
    )
   ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define init #f)
(define butterflies '())
(define leaf-obj 0)
(define tree-root 0)
(define current-plant-seed 0)
(define current-bg-image 0)

(define trees '())

(define (run-init)
  (cond 
   ((eq? game-mode "title")
    (set-background "images/bg.jpg")
    (advance-session-id)
    (canvas-setup)
    (set! new-butterfly-chance 0.05)
    (set! game-root (build-locator))
    (set! butterflies '())
    (set! title-text 
	  (make-textbox (/ screen-width 2) 230 "30pt" 40 "left" 
			(list "Clearwing Butterfly Game")))
    (set! info-text 
	  (make-textbox (/ screen-width 2) 300 "20pt" 40 "left" 
			(list "Take part in this citizen science game by" 
			      "hunting butterflies in the jungle!")))

    (set! button-a (make-text-button 
		    (vector (/ screen-width 2) 400 0) 
		    50 "Play"
		    (lambda ()
		      (destroy game-root)
		      (set! game-mode "game")
		      (run-init)))))

   ((eq? game-mode "game")
    (set! game-root (build-locator))
    (shuffle-background)
    (set! health 100)
    (set! hint-time 100)
    (set! butterflies-caught 0)
    (set! game-start-time (js "new Date()"))
    (set! new-butterfly-chance (local-get-param "clearwing" "New Butterfly Chance"))

    (set! seed (foldl (lambda (i r) (string-append r i)) 
		      ""
		      (build-list 20 (lambda (_) (random 10)))))
    
    (set! reseeed (rndf))
    (define seeds (list "one" 
			"71016562679325265622" 
			"10994801477592654110"
			"55999618436612302696"
			"56368532757824931962"
			"19020405703337933236"
			"08685588002554564547"
			"35622594592923537813"
			"10696066169979244499"
			"23282390091090871726"
			"53059426701815948700"
			"64763880626676799924"))
    (set! current-plant-seed (choose seeds))
    (Math.seedrandom current-plant-seed)
    ;;(msg seed)
    (with-state
     (parent game-root)
     (set! trees (list 		  
		  (build-plant left-plant-pos (choose plant-rules) (choose plant-texture-sets))
		  (build-plant centre-plant-pos (choose plant-rules) (choose plant-texture-sets))
		  (build-plant right-plant-pos (choose plant-rules) (choose plant-texture-sets))
		  ))
     (Math.seedrandom reseeed)
     (set! butterflies 
	   (build-list 
	    butterfly-start-num 
	    (lambda (_) (build-new-butterfly game-mode)))))
    )
   
   ((eq? game-mode "end")
    (set-background "images/bg.jpg")
    (set! new-butterfly-chance 0.05)
    (set! game-root (build-locator))
    (let ((time-taken (/ (- (js "new Date()") game-start-time) 1000.0)))

      (local-add-item 
       "clearwing" "score" 
       (list (local-get-param "clearwing" "Session ID")
	     time-taken butterflies-caught))

      (set! butterflies '())
      (set! title-text 
	    (make-textbox (/ screen-width 2) 230 "30pt" 40 "left" 
			  (list "Thankyou for playing")))

      (let ((score (score-position (local-get-param "clearwing" "Session ID"))))
	(set! info-text 
	      (make-textbox 
	       (/ screen-width 2) 300 "20pt" 40 "left" 
	       (list 
		(string-append "You lasted " time-taken " seconds.")
		(string-append "Caught " butterflies-caught " butterflies.") 
		(string-append "This score puts you in position " (car score) " out of " (cadr score) " games today."))))))
    
    (set! button-a (make-text-button 
		    (vector (- (/ screen-width 2) 200) 420 0) 
		    50 "Play again"
		    (lambda ()
		      (destroy game-root)
		      (set! game-mode "game")
		      (run-init))))
    
    (set! button-b (make-text-button 
		    (vector (+ (/ screen-width 2) 200) 420 0) 
		    50 "Quit"
		    (lambda ()
		      (destroy game-root)
		      (set! game-mode "title")
		      (run-init)))))
   
   (else 0)))

(define (render-game)
  (resize-glcanvas webgl-canvas)
  (resize-canvas canvas)
  (canvas-update-time)
  (cond
   ((eq? game-mode "title")
    (text-button-update button-a 0)    
    (set! butterflies (update-butterflies butterflies game-mode))
    (animate-butterflies! butterflies (time))

    (ctx.clearRect 0 0 screen-width screen-height)	  
    (set! ctx.fillStyle "#fff")
    (set! ctx.globalAlpha 0.75)
    (ctx.fillRect 0 160 screen-width 340)
    (set! ctx.globalAlpha 1.0)
    (set! ctx.fillStyle "#000")
    (textbox-render! title-text)
    (textbox-render! info-text)
    (text-button-render! button-a)
    0)
   ((eq? game-mode "game")
    (set! butterflies (update-butterflies butterflies game-mode))
    (animate-butterflies! butterflies (time))
    (animate-trees trees)
    (ctx.clearRect 0 0 screen-width screen-height)	  
    (draw-gobble ctx)

    ;;(draw-debug butterflies)
    
    (set! health (clamp (- health (* health-dec canvas-delta)) 0 100))
    (draw-health ctx 450 30 health 100)

    (set! hint-time (+ hint-time 0.1))

    (when (and (< health 20) (< (modulo hint-time 2) 1))
	  (set! ctx.fillStyle "#fff")
	  (set! ctx.globalAlpha 0.75)
	  (ctx.fillRect (- (/ screen-width 2) 180) 240 
			440 100)
	  (set! ctx.globalAlpha 1.0)
	  (set! ctx.fillStyle "#f00")	  
	  (ctx.fillText "Warning: Low Health!" 
			(- (/ screen-width 2) 150) 
			300))	   

    (when (< health 1)
	  (destroy game-root)
	  (set! game-mode "end")
	  (run-init))
    0)
   ((eq? game-mode "end")

    (text-button-update button-a 0)    
    (text-button-update button-b 0)    
    (set! butterflies (update-butterflies butterflies game-mode))
    (animate-butterflies! butterflies (time))

    (ctx.clearRect 0 0 screen-width screen-height)	  
    (set! ctx.fillStyle "#fff")
    (set! ctx.globalAlpha 0.75)
    (ctx.fillRect 0 160 screen-width 340)
    (set! ctx.globalAlpha 1.0)
    (set! ctx.fillStyle "#000")
    (textbox-render! title-text)
    (textbox-render! info-text)
    (text-button-render! button-a)
    (text-button-render! button-b)

    0)
   (else 0)))

(define (start)
  (when  (and
	  (not init)
	  (meshes-loaded?)
	  (textures-loaded?)
	  (shaders-loaded?)
	  (canvas-loaded?)
	  )
	 (set! init #t)
	 (set! game-mode "title")
	 (set! leaf-obj (with-state 
			 (translate (vector 1000 0 0)) 
			 (load-primitive "models/lsys-plane2.obj")))
	 (run-init)	 

	  ;; (define p 
	  ;;   (with-state 
	  ;;    (hint-cullface)
	  ;;    (shader-assign-compiled "default")   
	  ;;    (scale (vector 0.05 0.05 0.05))
	  ;;    (texture (load-texture "plants/eden2-1.png"))
	  ;;    (translate (vector 0 -1 -5))
	  ;;    (rotate (vector 45 45 45))
	  ;;    (load-primitive "models/lsys-plane2.obj")))

	 (clear-colour (list 0.0 0.0 0.0 0.0))
	 (every-frame render-game)
	 ;;(every-frame (with-primitive p (rotate (vector 0 2 0))))
	 
	 
	 ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(resize-glcanvas webgl-canvas)
(resize-canvas canvas)
(set-camera-angle 53)
(ctx.fillText "Loading..." 100 100)

(every-frame (start))

